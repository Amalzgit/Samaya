<!-- <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
<div class="card mb-4">
  <div class="card-header bg-dark text-white">
    <h4 class="mb-0"><i class="fa fa-shopping-cart mr-2"></i> Your Orders</h4>
  </div>
  <div class="card-body">
    <% if (orders && orders.length > 0) { %>
      <table class="table">
        <thead>
          <tr>
            <th>Order ID</th>
            <th>Date</th>
            <th>Items</th>
            <th>Total</th>
            <th>Status</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <% orders.forEach(order => { %>
            <tr>
              <td>#<%= order._id.toString().slice(-6).toUpperCase() %></td>
              <td><%= new Date(order.createdAt).toLocaleDateString() %></td>
              <td>
                <% order.items.forEach((item, index) => { %>
                  <%= item.product.name %> (x<%= item.quantity %>)
                  <%= index < order.items.length - 1 ? ', ' : '' %>
                <% }) %>
              </td>
              <td><%= order.totalPrice %></td>
              
              if (order.status === 'Processing'){<td><span class="badge bg-warning">Processing</span></td> 
              else if (order.status === 'Shipped'){<td><span class="badge bg-info">Shipped</span></td>
              else if (order.status === 'Delivered'){<td><span class="badge bg-success">Delivered</span></td>
              else if (order.status === 'Cancelled'){<td><span class="badge bg-danger">Cancelled</span></td>
            }
          }
        }
          }
          </td>
              <td>
                <a href="/order/<%= order._id %>" class="btn btn-sm btn-outline-primary">View Details</a>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    <% } else { %>
      <p>You haven't placed any orders yet.</p>
    <% } %>
  </div>
</div>
</div> -->





<main class="main">
  <section class="py-5">
    <div class="container">
      <div class="row">
        <!-- Sidebar Navigation -->
        <nav class="col-md-3 sidebar">
          <ul class="nav nav-tabs flex-column" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
              <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab" aria-controls="dashboard" aria-selected="true">Dashboard</a>
            </li>
            <li class="nav-item" role="presentation">
              <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab" aria-controls="orders" aria-selected="false">Orders</a>
            </li>
            <li class="nav-item" role="presentation">
              <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab" aria-controls="address" aria-selected="false">Address</a>
            </li>
            <li class="nav-item" role="presentation">
              <a class="nav-link" id="wallet-tab" data-bs-toggle="tab" href="#wallet" role="tab" aria-controls="wallet" aria-selected="false">Wallet</a>
            </li>
            <li class="nav-item" role="presentation">
              <a class="nav-link" id="account-detail-tab" data-bs-toggle="tab" href="#account-detail" role="tab" aria-controls="account-detail" aria-selected="false">Account Detail</a>
            </li>
          </ul>
        </nav>
        <!-- Main Content -->
        <div class="col-md-9">
          <div class="tab-content mt-3" id="myTabContent">
            <!-- Dashboard Tab -->
            <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
              <div class="card mb-4">
                <div class="card-body">
                  <header class="mb-4">
                    <h2 class="mb-0"><%= user.firstName %> <%= user.lastName %></h2>
                  </header>
                  <div>
                    <p><strong>First Name:</strong> <%= user.firstName %></p>
                    <p><strong>Last Name:</strong> <%= user.lastName %></p>
                    <p><strong>Email:</strong> <%= user.email %></p>
                    <p><strong>Phone:</strong> <%= user.phone %></p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Wallet Tab -->
            <div class="tab-pane fade" id="wallet" role="tabpanel" aria-labelledby="wallet-tab">
              <div class="card mb-4">
                <div class="card-header bg-dark text-white">
                  <h4 class="mb-0"><i class="fa fa-wallet mr-2"></i> Your Wallet</h4>
                </div>
                <div class="card-body">
                  <h5 class="mb-3">Current Balance: <span id="walletBalance" class="text-success"></span></h5>
                  <h5 class="mb-3">Total Balance (including pending transactions): <span id="walletTotalBalance" class="text-info"></span></h5>
                  <hr>
                  <h6 class="mb-3">Recent Transactions:</h6>
                  <div class="table-responsive">
                    <table class="table table-striped" id="transactionTable">
                      <thead>
                        <tr>
                          <th>Date</th>
                          <th>Type</th>
                          <th>Amount</th>
                          <th>Status</th>
                          <th>Order ID</th>
                        </tr>
                      </thead>
                      <tbody id="transactionList">
                        <!-- Transactions will be populated here dynamically -->
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
            <div class="tab-pane fade" id="account-detail" role="tabpanel" aria-labelledby="account-detail-tab">
              <div class="card mb-4">
                <div class="card-header bg-dark text-white">
                  <h4 class="mb-0"><i class="fa fa-user mr-2"></i> Edit Account Details</h4>
                </div>
                <div class="card-body">
                  <form id="update-user-form">
                    <div class="mb-3">
                      <label class="form-label" for="firstName">First Name</label>
                      <input class="form-control" id="firstName" name="firstName" placeholder="First Name" type="text" value="<%= user.firstName %>">
                      <span id="firstNameError" class="error text-danger"></span>
                    </div>
                    <div class="mb-3">
                      <label class="form-label" for="lastName">Last Name</label>
                      <input class="form-control" id="lastName" name="lastName" placeholder="Last Name" type="text" value="<%= user.lastName %>">
                      <span id="lastNameError" class="error text-danger"></span>
                    </div>
                    <hr>
                    <div class="mb-3">
                      <label class="form-label" for="newPassword">New Password</label>
                      <div class="input-group">
                        <input class="form-control" id="newPassword" name="newPassword" placeholder="New Password" type="password">
                        <button class="btn btn-outline-secondary" type="button" id="toggleNewPassword">
                          <i class="fa fa-eye"></i>
                        </button>
                      </div>
                      <span id="newPasswordError" class="error text-danger"></span>
                    </div>
                    <div class="mb-3">
                      <label class="form-label" for="confirmPassword">Confirm Password</label>
                      <div class="input-group">
                        <input class="form-control" id="confirmPassword" name="confirmPassword" placeholder="Confirm Password" type="password">
                        <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                          <i class="fa fa-eye"></i>
                        </button>
                      </div>
                      <span id="confirmPasswordError" class="error text-danger"></span>
                    </div>
                    <button type="submit" class="btn btn-dark">Save Changes</button>
                  </form>
                </div>
              </div>
            </div>
            <div class="tab-pane fade" id="address" role="tabpanel" aria-labelledby="address-tab">
              <div class="row" id="addresses-container">
                <% addresses.forEach(address => { %>
                  <div class="col-lg-6">
                    <div class="card mb-4 <%= address.isDefault ? 'border-primary' : '' %>">
                      <div class="card-header bg-dark text-white">
                        <h4 class="mb-0">
                          <%= address.type %> Address
                          <% if (address.isDefault) { %>
                            <span class="badge bg-success ms-2">Default</span>
                          <% } %>
                        </h4>
                      </div>
                      <div class="card-body">
                        <address>
                          <strong>Full Name:</strong> <%= address.fullName %><br>
                          <strong>Country:</strong> <%= address.country %><br>
                          <strong>Mobile Number:</strong> <%= address.mobileNumber %><br>
                          <strong>Address Line 1:</strong> <%= address.addressLine1 %><br>
                          <% if (address.addressLine2) { %>
                            <strong>Address Line 2:</strong> <%= address.addressLine2 %><br>
                          <% } %>
                          <% if (address.landmark) { %>
                            <strong>Landmark:</strong> <%= address.landmark %><br>
                          <% } %>
                          <strong>Pincode:</strong> <%= address.pincode %><br>
                          <strong>Town/City:</strong> <%= address.townCity %><br>
                          <strong>State:</strong> <%= address.state %><br>
                        </address>
                        <button class="edit-address-btn btn btn-outline-primary" data-id="<%= address._id %>">Edit Address</button>
                        <% if (!address.isDefault) { %>
                          <button class="delete-address-btn btn btn-danger" data-id="<%= address._id %>">Delete Address</button>
                        <% } %>
                      </div>
                    </div>
                  </div>
                <% }); %>
              </div>
              
              <a class="btn btn-dark btn-lg mt-3" href="/add-address">
                <i class="fa fa-plus-circle mr-2"></i> Add Address
              </a>
            </div>
            <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
              <div class="card mb-4">
                <div class="card-header bg-dark text-white">
                  <h4 class="mb-0"><i class="fa fa-shopping-cart mr-2"></i> Your Orders</h4>
                </div>
                <div class="card-body">
                  <% if (orders && orders.length > 0) { %>
                    <ul class="list-group">
                      <% orders.forEach(order => { %>
                        <li class="list-group-item mb-4 border rounded shadow-sm">
                          <div class="d-flex justify-content-between align-items-center mb-3">
                            <div>
                              <h3 class="mb-0">Order #<%= order._id.toString().slice(-6).toUpperCase() %></h3>
                              <p class="mb-1 text-muted">Date: <%= new Date(order.createdAt).toLocaleDateString() %></p>
                              <p class="mb-1 text-muted">Total: <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(order.totalPrice) %></p>
                              <p class="mb-1">Status: 
                                <% if (order.status === 'Cancelled') { %>
                                  <span class="badge bg-danger">Cancelled</span>
                                <% } else if (order.status === 'Partially Cancelled') { %>
                                  <span class="badge bg-warning">Partially Cancelled</span>
                                <% } else if (order.status === 'Shipped') { %>
                                  <span class="badge bg-info">Shipped</span>
                                <% } else if (order.status === 'Delivered') { %>
                                  <span class="badge bg-success">Delivered</span>
                                <% } else if (order.status === 'Processing') { %>
                                  <span class="badge bg-warning">Processing</span>
                                <% } else { %>
                                  <span class="badge bg-secondary">Pending</span>
                                <% } %>
                              </p>
                            </div>
                            <a href="/order-details/<%= order._id %>" class="btn btn-sm btn-outline-primary">View Details</a>
                          </div>
                          <ul class="list-group mb-3">
                            <% order.items.forEach(item => { %>
                              <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                  <h6 class="mb-1"><%= item.product.name %></h6>
                                  <p class="mb-1">Quantity: <%= item.quantity %></p>
                                  <p class="mb-1">Price: <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(item.price) %></p>
                                  <p class="mb-1">Status: 
                                    <% if (item.status === 'Active') { %>
                                      <% if (order.status === 'Delivered') { %>
                                        <button onclick="requestReturn('<%= order._id %>', '<%= item._id %>')" class="btn btn-sm btn-warning">Request Return</button>
                                      <% } else { %>
                                        <span class="badge bg-secondary"><%=item.status%></span>
                                      <% } %>
                                    <% } else if (item.status === 'Return Requested') { %>
                                      <span class="badge bg-info">Return Requested</span>
                                    <% } else if (item.status === 'Return Accepted') { %>
                                      <span class="badge bg-success">Return Accepted</span>
                                    <% } else if (item.status === 'Return Rejected') { %>
                                      <span class="badge bg-danger">Return Rejected</span>
                                    <% } else if (item.status === 'Active') { %>
                                      <% if (order.status !== 'Cancelled' && order.status !== 'Delivered' && order.status !== 'Shipped') { %>
                                        <span class="badge bg-secondary">Active</span>
                                      <% } %>
                                    <% } else { %>
                                      <span class="badge bg-secondary"><%= item.status %></span>
                                    <% } %>
                                  </p>
                                </div>
                                <div>
                                  <% if (item.status === 'Active' && order.status !== 'Cancelled' && order.status !== 'Delivered' && order.status !== 'Shipped') { %>
                                    <button class="btn btn-sm btn-danger cancel-item" data-order-id="<%= order._id %>" data-item-id="<%= item._id %>">Cancel</button>
                                  <% } %>
                                </div>
                              </li>
                            <% }) %>
                          </ul>
                        </li>
                      <% }) %>
                    </ul>
                  <% } else { %>
                    <p>You haven't placed any orders yet.</p>
                  <% } %>
                </div>
              </div>
            </div>
            <!-- Other tab panes here -->
          </div>
        </div>
      </div>
    </div>
  </section>
</main>



<!-- PLACE ORDER -->
<!--   const { addressId, paymentMethod } = req.body;
      const userId = req.currentUser._id;
      console.log(paymentMethod,"=> paymentMethod")
      console.log(addressId,"=> address id")
      console.log(userId,"=> userId")

const [user,cart, address] = await new Promise.all([
  User.findById(userId),
  Cart.findOne({ user: userId }).populate('items.product'),
  addressModel.findById(addressId)
])

      if (!user) {
        return res.status(404).json({ success: false, message: 'User not found' });
      }

      if (!cart || cart.items.length === 0) {
        return res.status(400).json({ success: false, message: 'Cart is empty' });
      }
      if (!address) {
        return res.status(400).json({ success: false, message: 'Invalid address' });
      }

      const order = new Order({
        user: userId,
        address: {
          fullName: address.fullName,
          mobileNumber: address.mobileNumber,
          pincode: address.pincode,
          addressLine1: address.addressLine1,
          addressLine2: address.addressLine2,
          landmark: address.landmark,
          townCity: address.townCity,
          state: address.state,
          country: address.country,
          type: address.type
        },
        payment: {
          method: paymentMethod,
          status: 'Pending'
        }
      });

      let totalPrice = 0;

      for (const cartItem of cart.items) {
        const product = await Product.findById(cartItem.product._id);
        if (!product) {
          return res.status(404).json({ success: false, message: `Product ${cartItem.product.name} not found` });
        }
        if (product.quantity < cartItem.quantity) {
          return res.status(400).json({ success: false, message: `Insufficient stock for ${product.name}` });
        }

        const orderItem = {
          product: product._id,
          name: product.name,
          price: product.price,
          quantity: cartItem.quantity,
          totalPrice: product.price * cartItem.quantity
        };
        order.items.push(orderItem);
        totalPrice += orderItem.totalPrice;

        product.quantity -= cartItem.quantity;
        await product.save();
      }

      order.totalPrice = totalPrice;

      if(paymentMethod ==='razorpay'){
        const razorpayOrder =await createOrder(
          1 *100,
          'INR',
          `order_${Date.now()}`
        );
        order.payment.razorpayID = razorpayOrder.id;
        await order.save();

        return res.json({
          success:true,
          order:order,
          razorpayOrder :{
            id: razorpayOrder.id,
            amount :razorpayOrder.amount,
            currency :razorpayOrder.currency
          }
        });
      }else{
      await order.save();

      await Cart.findOneAndUpdate({ user: userId }, { $set: { items: [] } });

      for (const cartItem of cart.items) {
        const product = await Product.findById(cartItem.product._id);
        if (product) {
          product.stock -= cartItem.quantity;
          await product.save();
        }
      }
      return res.redirect(`/order-placed/${order.id}`);
    }
    } catch (error) {
      console.log("Order Placing Error:", error);
      res.status(500).json({ success: false, message: 'An error occurred while placing the order' });
    }
}; -->













<!-- Certainly! I can help you adapt these CRUD controller methods for the ProductOffer model. Here is a set of CRUD controllers based on the ProductOffer schema you provided:

javascript
Copy code
const { validationResult } = require('express-validator');
const ProductOffer = require('../../models/ProductOffer'); // Adjust the path as needed
const Product = require('../../models/Product'); // Assuming you have a Product model to reference

// View all product offers
const viewOffers = async (req, res) => {
    try {
        const offers = await ProductOffer.find().populate('productId');
        return res.render('Offers', { offers });
    } catch (error) {
        console.error('Error fetching offers:', error);
        return res.render('Offers', { offers: [], errorMessage: "An error occurred while fetching offers." });
    }
};

// Load add offer page
const loadAddOffer = async (req, res) => {
    try {
        const products = await Product.find();
        return res.render('createOffer', { products, successMessage: '', errorMessage: '' });
    } catch (error) {
        console.error('Error loading add offer page:', error);
        return res.render('Offers', { successMessage: '', errorMessage: "An error occurred while rendering add offer page." });
    }
};

// Add a new offer
const addOffer = async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        console.log(errors);
        const products = await Product.find();
        return res.render('createOffer', { products, successMessage: '', errorMessage: errors.array()[0].msg });
    }

    const { productId, discount, startDate, endDate } = req.body;

    try {
        const newOffer = new ProductOffer({
            productId,
            discount,
            startDate,
            endDate,
        });
        await newOffer.save();
        return res.redirect('/admin/Offers');
    } catch (error) {
        console.error('Error adding offer:', error);
        const products = await Product.find();
        return res.render('createOffer', { products, successMessage: '', errorMessage: "An error occurred while creating the offer." });
    }
};

// Load edit offer page
const loadEditOffer = async (req, res) => {
    try {
        const offer = await ProductOffer.findById(req.params.offerId).populate('productId');
        if (!offer) {
            return res.redirect('/admin/Offers');
        }
        const products = await Product.find();
        return res.render('edit-offer', { offer, products, successMessage: '', errorMessage: '' });
    } catch (error) {
        console.error('Error loading edit offer page:', error);
        return res.render('Offers', { successMessage: '', errorMessage: "An error occurred while rendering edit offer page." });
    }
};

// Edit an existing offer
const editOffer = async (req, res) => {
    try {
        const { productId, discount, startDate, endDate, isActive } = req.body;
        const offerId = req.params.offerId;

        if (!productId || discount == null || !startDate || !endDate) {
            return res.redirect('/admin/Offers');
        }

        await ProductOffer.findByIdAndUpdate(offerId, {
            productId,
            discount,
            startDate,
            endDate,
            isActive: isActive === 'on',
        });
        return res.redirect('/admin/Offers');
    } catch (error) {
        console.error('Error editing offer:', error);
        const products = await Product.find();
        return res.render('edit-offer', { offer: req.body, products, successMessage: '', errorMessage: 'An error occurred while updating the offer.' });
    }
};

// Delete an offer (soft delete)
const deleteOffer = async (req, res) => {
    try {
        const offerId = req.params.offerId;
        const offer = await ProductOffer.findById(offerId);
        if (offer) {
            offer.isActive = false;
            await offer.save();
        }
        return res.redirect('/admin/Offers');
    } catch (error) {
        console.error('Error deleting offer:', error);
        return res.redirect('/admin/Offers');
    }
};

// Restore an offer (soft delete reversal)
const restoreOffer = async (req, res) => {
    try {
        const offerId = req.params.offerId;
        const offer = await ProductOffer.findById(offerId);
        if (offer) {
            offer.isActive = true;
            await offer.save();
        }
        return res.redirect('/admin/Offers');
    } catch (error) {
        console.error('Error restoring offer:', error);
        return res.redirect('/admin/Offers');
    }
};

// Permanently remove an offer
const removeOffer = async (req, res) => {
    try {
        const offerId = req.params.offerId;
        await ProductOffer.findByIdAndDelete(offerId);
        return res.redirect('/admin/Offers');
    } catch (error) {
        console.error('Error removing offer:', error);
        return res.redirect('/admin/Offers');
    }
};

module.exports = {
    viewOffers,
    loadAddOffer,
    addOffer,
    loadEditOffer,
    editOffer,
    deleteOffer,
    restoreOffer,
    removeOffer
}; -->

/activate-offer/66c97f2407da1d19d22f2291
http://localhost:3000/admin/delete-offer/66c97f2407da1d19d22f2291