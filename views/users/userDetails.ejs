<main class="main">
  <section class="py-5">
    <div class="container">
      <div class="row">
        <!-- Sidebar Navigation -->
        <nav class="col-md-3 sidebar">
          <ul class="nav nav-tabs flex-column" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
              <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab" aria-controls="dashboard" aria-selected="true">Dashboard</a>
            </li>
            <!-- <li class="nav-item" role="presentation">
              <a class="nav-link" id="forgot-password-tab" data-bs-toggle="tab" href="#forgot-password" role="tab" aria-controls="forgot-password" aria-selected="false">Forgot Password</a>
            </li> -->
            <li class="nav-item" role="presentation">
              <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab" aria-controls="orders" aria-selected="false">Orders</a>
            </li>
            <li class="nav-item" role="presentation">
              <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab" aria-controls="address" aria-selected="false">Address</a>
            </li>
            <li class="nav-item" role="presentation">
              <a class="nav-link" id="wallet-tab" data-bs-toggle="tab" href="#wallet" role="tab" aria-controls="wallet" aria-selected="false">Wallet</a>
            </li>
            <li class="nav-item" role="presentation">
              <a class="nav-link" id="account-detail-tab" data-bs-toggle="tab" href="#account-detail" role="tab" aria-controls="account-detail" aria-selected="false">Account Detail</a>
            </li>
          </ul>
        </nav>
        <!-- Main Content -->
        <div class="col-md-9">
          <div class="tab-content mt-3" id="myTabContent">
            <!-- Dashboard Tab -->
            <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
              <div class="card mb-4">
                <div class="card-body">
                  <header class="mb-4">
                    <h2 class="mb-0"><%= user.firstName %> <%= user.lastName %></h2>
                  </header>
                  <div>
                    <p><strong>First Name:</strong> <%= user.firstName %></p>
                    <p><strong>Last Name:</strong> <%= user.lastName %></p>
                    <p><strong>Email:</strong> <%= user.email %></p>
                    <p><strong>Phone:</strong> <%= user.phone %></p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Forgot Password Tab -->
            <div class="tab-pane fade" id="forgot-password" role="tabpanel" aria-labelledby="forgot-password-tab">
              <div class="card mb-4">
                <div class="card-body">
                  <p>If you've forgotten your password, please click the link below to reset it:</p>
                  <a href="/forgot-password" class="btn btn-outline-primary"><i class="fa fa-key mr-2"></i> Forgot Password</a>
                </div>
              </div>
            </div>

            <!-- Orders Tab -->
            <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
              <div class="card mb-4">
                <div class="card-header bg-dark text-white">
                  <h4 class="mb-0" style="color: white;">
                    <i class="fa fa-shopping-cart mr-2" style="color: aliceblue;"></i> Your Orders
                  </h4>
                </div>
                <div class="card-body">
                  <% if (orders && orders.length > 0) { %>
                    <ul class="list-group">
                      <% orders.forEach(order => { %>
                        <li class="list-group-item mb-4 border rounded shadow-sm">
                          <div class="d-flex justify-content-between align-items-center mb-3">
                            <div>
                              <h3 class="mb-0">Order #<%= order._id.toString().slice(-6).toUpperCase() %></h3>
                              <p class="mb-1 text-muted">Date: <%= new Date(order.createdAt).toLocaleDateString() %></p>
                              <p class="mb-1 text-muted">Total: <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(order.totalPrice) %></p>
                              <p class="mb-1">Status: 
                                <% if (order.status === 'Cancelled') { %>
                                  <span class="badge bg-danger">Cancelled</span>
                                <% } else if (order.status === 'Partially Cancelled') { %>
                                  <span class="badge bg-warning">Partially Cancelled</span>
                                <% } else if (order.status === 'Shipped') { %>
                                  <span class="badge bg-info">Shipped</span>
                                <% } else if (order.status === 'Delivered') { %>
                                  <span class="badge bg-success">Delivered</span>
                                <% } else if (order.status === 'Processing') { %>
                                  <span class="badge bg-warning">Processing</span>
                                <% } else { %>
                                  <span class="badge bg-secondary">Pending</span>
                                <% } %>
                              </p>
                            </div>
                            <a href="/order-details/<%= order._id %>" class="btn btn-sm btn-outline-primary">View Details</a>
                          </div>
                          <ul class="list-group mb-3">
                            <% order.items.forEach(item => { %>
                              <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                  <h6 class="mb-1"><%= item.product.name %></h6>
                                  <p class="mb-1">Quantity: <%= item.quantity %></p>
                                  <p class="mb-1">Price: <%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(item.price) %></p>
                                  <p class="mb-1">Status: 
                                    <% if (item.status === 'Active') { %>
                                      <% if (order.status === 'Delivered') { %>
                                        <button onclick="requestReturn('<%= order._id %>', '<%= item._id %>')" class="btn btn-sm btn-warning">Request Return</button>
                                      <% } else { %>
                                        <span class="badge bg-secondary"><%=item.status%></span>
                                      <% } %>
                                    <% } else if (item.status === 'Return Requested') { %>
                                      <span class="badge bg-info">Return Requested</span>
                                    <% } else if (item.status === 'Return Accepted') { %>
                                      <span class="badge bg-success">Return Accepted</span>
                                    <% } else if (item.status === 'Return Rejected') { %>
                                      <span class="badge bg-danger">Return Rejected</span>
                                    <% } else if (item.status === 'Active') { %>
                                      <% if (order.status !== 'Cancelled' && order.status !== 'Delivered' && order.status !== 'Shipped') { %>
                                        <span class="badge bg-secondary">Active</span>
                                      <% } %>
                                    <% } else { %>
                                      <span class="badge bg-secondary"><%= item.status %></span>
                                    <% } %>
                                  </p>
                                </div>
                                <div>
                                  <% if (item.status === 'Active' && order.status !== 'Cancelled' && order.status !== 'Delivered' && order.status !== 'Shipped') { %>
                                    <button class="btn btn-sm btn-danger cancel-item" data-order-id="<%= order._id %>" data-item-id="<%= item._id %>">Cancel</button>
                                  <% } %>
                                </div>
                              </li>
                            <% }) %>
                          </ul>
                        </li>
                      <% }) %>
                    </ul>
                  <% } else { %>
                    <p>You haven't placed any orders yet.</p>
                  <% } %>
                </div>
              </div>
            </div>
            
           
            <!-- Address Tab -->
            <div class="tab-pane fade" id="address" role="tabpanel" aria-labelledby="address-tab">
              <div class="row" id="addresses-container">
                <% addresses.forEach(address => { %>
                  <div class="col-lg-6">
                    <div class="card mb-4 <%= address.isDefault ? 'border-primary' : '' %>">
                      <div class="card-header bg-dark text-white">
                        <h4 class="mb-0" style="color: white;">
                          <%= address.type %> Address
                          <% if (address.isDefault) { %>
                            <span class="badge bg-success ms-2">Default</span>
                          <% } %>
                        </h4>
                      </div>
                      <div class="card-body">
                        <address>
                          <strong>Full Name:</strong> <%= address.fullName %><br>
                          <strong>Country:</strong> <%= address.country %><br>
                          <strong>Mobile Number:</strong> <%= address.mobileNumber %><br>
                          <strong>Address Line 1:</strong> <%= address.addressLine1 %><br>
                          <% if (address.addressLine2) { %>
                            <strong>Address Line 2:</strong> <%= address.addressLine2 %><br>
                          <% } %>
                          <% if (address.landmark) { %>
                            <strong>Landmark:</strong> <%= address.landmark %><br>
                          <% } %>
                          <strong>Pincode:</strong> <%= address.pincode %><br>
                          <strong>Town/City:</strong> <%= address.townCity %><br>
                          <strong>State:</strong> <%= address.state %><br>
                        </address>
                        <button class="edit-address-btn btn btn-outline-primary" data-id="<%= address._id %>">Edit Address</button>
                        <% if (!address.isDefault) { %>
                          <button class="delete-address-btn btn btn-danger" data-id="<%= address._id %>">Delete Address</button>
                        <% } %>
                      </div>
                    </div>
                  </div>
                <% }); %>
              </div>
              
              <a class="btn btn-dark btn-lg mt-3" href="/add-address">
                <i class="fa fa-plus-circle mr-2"></i> Add Address
              </a>
            </div>
             <!-- Wallet Tab -->
             <div class="tab-pane fade" id="wallet" role="tabpanel" aria-labelledby="wallet-tab">
              <div class="card mb-4">
                <div class="card-header bg-dark text-white">
                  <h4 class="mb-0" style="color: white;">
                    <i class="fa fa-wallet mr-2"></i> Your Wallet
                  </h4>
                </div>
                <div class="card-body">
                  <h2 class="mb-3">Current Balance: <span id="walletBalance" class="text-success"></span></h2>
                  <h5 class="mb-3">Total Balance (including pending transactions): <span id="walletTotalBalance" class="text-info"></span></h5>
                  <hr>
                  <h6 class="mb-3">Recent Transactions:</h6>
                  <div class="table-responsive">
                    <table class="table table-striped" id="transactionTable">
                      <thead>
                        <tr>
                          <th>Date</th>
                          <th>Type</th>
                          <th>Amount</th>
                          <th>Status</th>
                          <th>Order ID</th>
                        </tr>
                      </thead>
                      <tbody id="transactionList">

                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
            <!-- Account Details Tab -->
            <div class="tab-pane fade" id="account-detail" role="tabpanel" aria-labelledby="account-detail-tab">
              <div class="card mb-4">
                <div class="card-header bg-dark text-white">
                  <h4 class="mb-0" style="color: white;">
                    <i class="fa fa-user mr-2"></i> Edit Account Details
                  </h4>
                  
                </div>
                <div class="card-body">
                  <form id="update-user-form">
                    <div class="mb-3">
                      <label class="form-label" for="firstName">First Name</label>
                      <input class="form-control" id="firstName" name="firstName" placeholder="First Name" type="text" value="<%= user.firstName %>">
                      <span id="firstNameError" class="error text-danger"></span>
                    </div>
                    <div class="mb-3">
                      <label class="form-label" for="lastName">Last Name</label>
                      <input class="form-control" id="lastName" name="lastName" placeholder="Last Name" type="text" value="<%= user.lastName %>">
                      <span id="lastNameError" class="error text-danger"></span>
                    </div>
                    <hr>
                    <div class="mb-3">
                      <label class="form-label" for="newPassword">New Password</label>
                      <div class="input-group">
                        <input class="form-control" id="newPassword" name="newPassword" placeholder="New Password" type="password">
                        <button class="btn btn-outline-secondary" type="button" id="toggleNewPassword">
                          <i class="fa fa-eye"></i>
                        </button>
                      </div>
                      <span id="newPasswordError" class="error text-danger"></span>
                    </div>
                    <div class="mb-3">
                      <label class="form-label" for="confirmPassword">Confirm Password</label>
                      <div class="input-group">
                        <input class="form-control" id="confirmPassword" name="confirmPassword" placeholder="Confirm Password" type="password">
                        <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                          <i class="fa fa-eye"></i>
                        </button>
                      </div>
                      <span id="confirmPasswordError" class="error text-danger"></span>
                    </div>
                    <button type="submit" class="btn btn-dark">Save Changes</button>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</main>

  
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    // Toggle password visibility
    const togglePasswordVisibility = (passwordFieldId, toggleButtonId) => {
      const passwordField = document.getElementById(passwordFieldId);
      const toggleButton = document.getElementById(toggleButtonId);

      toggleButton.addEventListener('click', () => {
        if (passwordField.type === 'password') {
          passwordField.type = 'text';
          toggleButton.innerHTML = '<i class="fa fa-eye-slash" aria-hidden="true"></i>';
        } else {
          passwordField.type = 'password';
          toggleButton.innerHTML = '<i class="fa fa-eye" aria-hidden="true"></i>';
        }
      });
    };

    togglePasswordVisibility('newPassword', 'toggleNewPassword');
    togglePasswordVisibility('confirmPassword', 'toggleConfirmPassword');

    // Form validation
    const validateField = (input, errorElement, validationFn) => {
      input.addEventListener('input', () => {
        const isValid = validationFn(input.value);
        errorElement.textContent = isValid ? '' : '* Invalid input';
        return isValid;
      });
    };

    const validateFirstName = (value) => value.trim() !== '';
    const validateLastName = (value) => value.trim() !== '';
    const validateNewPassword = (value) => value.trim().length >= 6; // Adjusted minimum length
    const validateConfirmPassword = (value) => value === document.getElementById('newPassword').value;

    validateField(document.getElementById('firstName'), document.getElementById('firstNameError'), validateFirstName);
    validateField(document.getElementById('lastName'), document.getElementById('lastNameError'), validateLastName);
    validateField(document.getElementById('newPassword'), document.getElementById('newPasswordError'), validateNewPassword);
    validateField(document.getElementById('confirmPassword'), document.getElementById('confirmPasswordError'), validateConfirmPassword);

    // Handle user update form submission
    document.getElementById('update-user-form').addEventListener('submit', function(event) {
      event.preventDefault();

      const formData = new FormData(this);
      const data = Object.fromEntries(formData.entries());

      fetch('/user-details', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      .then(response => response.json())
      .then(result => {
        if (result.success) {
          alert('User details updated successfully!');
          window.location.hash = '#account-detail'; // Set hash fragment
          window.location.reload(); // Reload page
        } else {
          alert('Error updating details: ' + result.message);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('An unexpected error occurred. Please try again later.');
      });
    });

    // Edit address button click handler
    document.querySelectorAll('.edit-address-btn').forEach(button => {
      button.addEventListener('click', function() {
        const addressId = this.dataset.id;
        window.location.href = `/edit-address/${addressId}`;
      });
    });

    // Delete address button click handler
    document.querySelectorAll('.delete-address-btn').forEach(button => {
      button.addEventListener('click', function() {
        const addressId = this.dataset.id;

        if (confirm('Are you sure you want to delete this address?')) {
          fetch(`/address/delete/${addressId}`, { method: 'DELETE' })
          .then(response => response.json())
          .then(result => {
            if (result.success) {
              alert('Address deleted successfully!');
              window.location.reload(); // Reload to reflect changes
            } else {
              alert('Error deleting address: ' + result.message);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('An unexpected error occurred. Please try again later.');
          });
        }
      });
    });
    document.getElementById('add-address-form').addEventListener('submit', function(event) {
      event.preventDefault();

      const formData = new FormData(this);
      const data = Object.fromEntries(formData.entries());

      fetch('/add-address', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      .then(response => response.json())
      .then(responseData => {
        const formMessage = document.getElementById('form-message');
        if (responseData.success) {
          formMessage.textContent = 'Address added successfully!';
          formMessage.style.color = 'green';
          // Optionally, reset the form or redirect
          document.getElementById('add-address-form').reset();
          window.location.href = "/user-details";
          console.log("address added");
          
        } else {
          formMessage.textContent = 'Error: ' + responseData.message;
          formMessage.style.color = 'red';
        }
      })
      .catch(error => {
        console.error('Error:', error);
        const formMessage = document.getElementById('form-message');
        formMessage.textContent = 'An error occurred';
        formMessage.style.color = 'red';
      });
    });
  });

  </script>
  <script>
    const activateTab = (hash) => {
        const tabTrigger = document.querySelector(`a[href="${hash}"]`);
        const targetPane = document.querySelector(hash);

        if (tabTrigger && targetPane) {
            // Remove active classes from all tab links and panes
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
                link.setAttribute('aria-selected', 'false');
            });
            document.querySelectorAll('.tab-pane').forEach(pane => {
                pane.classList.remove('show', 'active');
            });

            // Add active class to the selected tab link and pane
            tabTrigger.classList.add('active');
            tabTrigger.setAttribute('aria-selected', 'true');
            targetPane.classList.add('show', 'active');
        }
    };

     const hash = window.location.hash;
    console.log("hash: ",hash);
    
    if (hash) {
        activateTab(hash);
    }
  </script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Cancel item functionality
    document.querySelectorAll('.cancel-item').forEach(button => {
      button.addEventListener('click', function() {
        const orderId = this.getAttribute('data-order-id');
        const itemId = this.getAttribute('data-item-id');
        if (confirm('Are you sure you want to cancel this item?')) {
          // Send AJAX request to cancel the item
          fetch(`/cancel-item/${orderId}/${itemId}`, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                alert('Item cancelled successfully');
                location.reload();
              } else {
                alert('Failed to cancel item: ' + data.message);
              }
            })
            .catch(error => console.error('Error:', error));
        }
      });
    });
  
  
  });
  </script>
 <script>
  function requestReturn(orderId, itemId) {
      Swal.fire({
          title: 'Return Reason',
          input: 'select',
          inputOptions: {
              'damaged': 'Product damaged',
              'size_not_fit': 'Size not fit',
              'defective': 'Product defective',
              'wrong_item': 'Received wrong item',
              'not_as_described': 'Not as described',
              'changed_mind': 'Changed my mind',
              'other': 'Other'
          },
          inputPlaceholder: 'Select a reason',
          showCancelButton: true,
          inputValidator: (value) => {
              return new Promise((resolve) => {
                  if (value) {
                      resolve()
                  } else {
                      resolve('You need to select a return reason')
                  }
              })
          }
      }).then((result) => {
          if (result.isConfirmed) {
              let reason = result.value;
              if (reason === 'other') {
                  Swal.fire({
                      title: 'Other Reason',
                      input: 'text',
                      inputPlaceholder: 'Please specify the reason',
                      showCancelButton: true,
                      inputValidator: (value) => {
                          if (!value) {
                              return 'You need to write something!'
                          }
                      }
                  }).then((result) => {
                      if (result.isConfirmed) {
                          sendReturnRequest(orderId, itemId, result.value);
                      }
                  });
              } else {
                  sendReturnRequest(orderId, itemId, reason);
              }
          }
      });
  }
  
  function sendReturnRequest(orderId, itemId, reason) {
      fetch(`/return-item/${orderId}/${itemId}`, {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
          },
          body: JSON.stringify({ reason: reason })
      })
      .then(response => response.json())
      .then(data => {
          Swal.fire({
              icon: 'success',
              title: 'Return Requested',
              text: data.message,
          }).then(() => {
              location.reload();
          });
      })
      .catch(error => {
          Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: 'Error requesting return',
          });
          console.error('Error:', error);
      });
  }
  </script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Function to fetch wallet details
    async function fetchWalletDetails() {
      try {
        const response = await fetch('/wallet/details');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        // console.log('Wallet data:', data); // Debugging line

        // Use the directly available values
        const balance = data.formattedBalance || '₹0.00';
        const totalBalance = data.totalBalance || 0;

        // Format and display the balances
        document.getElementById('walletBalance').textContent = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(totalBalance);
        document.getElementById('walletTotalBalance').textContent = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(totalBalance);

        // Populate transactions table
        populateTransactions(data.transactions);
      } catch (error) {
        console.error('Error fetching wallet details:', error);
        // Optionally display an error message to the user
        document.getElementById('walletBalance').textContent = 'Error fetching data';
        document.getElementById('walletTotalBalance').textContent = 'Error fetching data';
      }
    }

    // Function to populate transactions table
    function populateTransactions(transactions) {
      const transactionList = document.getElementById('transactionList');
      transactionList.innerHTML = '';
      transactions.forEach(transaction => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${new Date(transaction.createdAt).toLocaleString()}</td>
          <td>${transaction.type === 'credit' ? 'Credit' : 'Debit'}</td>
          <td>${new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(transaction.amount)}</td>
          <td>${transaction.status}</td>
          <td>${transaction.orderId ? transaction.orderId : 'N/A'}</td>
        `;
        transactionList.appendChild(row);
      });
    }

    // Fetch wallet details when the wallet tab is shown
    const walletTab = document.getElementById('wallet-tab');
    if (walletTab) {
      walletTab.addEventListener('shown.bs.tab', fetchWalletDetails);
    }

    // Call fetchWalletDetails on page load to initialize
    fetchWalletDetails();
  });
</script>
