<div class="container mt-4 pb-200">
    <h1 class="mb-4">Orders</h1>
    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Order ID</th>
                    <th>Customer Name</th>
                    <th>Total Amount</th>
                    <th>Status</th>
                    <th>Items</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% orders.forEach((order, index) => { %>
                    <tr id="order-<%= order._id %>" class="status-<%= order.status.toLowerCase() %>">
                        <td><%= index + 1 %></td>
                        <td><%= order.id %></td>
                        <td><%= order.user.firstName %> <%= order.user.lastName %></td>
                        <td><%= new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(order.totalPrice) %></td>
                        <td>
                            <select class="form-control status-dropdown" onchange="changeStatus('<%= order._id %>', this.value)" 
                                <% if (order.status === 'Delivered' || order.status === 'Cancelled') { %> disabled <% } %> >
                                <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                <option value="Partially Cancelled" <%= order.status === 'Partially Cancelled' ? 'selected' : '' %>>Partially Cancelled</option>
                            </select>
                        </td>
                        <td>
                            <ul>
                                <% order.items.forEach(item => { %>
                                    <li>
                                        <strong><%= item.product.name %></strong> (Qty: <%= item.quantity %>)<br>
                                        - Status: <%= item.status %><br>
                                        <div>
                                            <% if (item.status === 'Return Requested') { %>
                                                <button onclick="handleReturn('<%= order._id %>', '<%= item._id %>', 'accept')" class="btn btn-sm btn-success">Accept Return</button>
                                                <button onclick="handleReturn('<%= order._id %>', '<%= item._id %>', 'reject')" class="btn btn-sm btn-danger">Reject Return</button>
                                            <% } %>
                                            <% if (item.status === 'Shipped' || item.status === 'Pending') { %>
                                                <select class="form-control status-dropdown-item" onchange="changeItemStatus('<%= order._id %>', '<%= item._id %>', this.value)">
                                                    <option value="Pending" <%= item.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                                    <option value="Processing" <%= item.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                                    <option value="Shipped" <%= item.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                                    <option value="Delivered" <%= item.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                                    <option value="Cancelled" <%= item.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                                    <option value="Partially Cancelled" <%= item.status === 'Partially Cancelled' ? 'selected' : '' %>>Partially Cancelled</option>
                                                </select>
                                            <% } %>
                                        </div>
                                    </li>
                                <% }) %>
                            </ul>
                        </td>
                        <td>
                            <a href="/admin/order-details/<%= order.id %>" class="btn btn-info btn-sm" title="View Order Details">
                                <i class="fas fa-info-circle"></i>
                            </a>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
    </div>
</div>

<script>
    function changeStatus(orderId, status) {
        fetch(`/admin/update-order-status/${orderId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: status })
        })
        .then(response => response.json())
        .then(data => {
            Swal.fire({
                icon: 'success',
                title: 'Status Updated',
                text: data.message,
            }).then(() => {
                location.reload();
            });
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Error updating order status',
            });
            console.error('Error:', error);
        });
    }

    function changeItemStatus(orderId, itemId, status) {
        fetch(`/admin/update-item-status/${orderId}/${itemId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: status })
        })
        .then(response => response.json())
        .then(data => {
            Swal.fire({
                icon: 'success',
                title: 'Item Status Updated',
                text: data.message,
            }).then(() => {
                location.reload();
            });
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Error updating item status',
            });
            console.error('Error:', error);
        });
    }

    function cancelItem(orderId, itemId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You want to cancel this item?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, cancel it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/admin/cancel-order-item/${orderId}/${itemId}`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    Swal.fire(
                        'Cancelled!',
                        data.message,
                        'success'
                    ).then(() => {
                        location.reload();
                    });
                })
                .catch(error => {
                    Swal.fire(
                        'Error!',
                        'Error cancelling item',
                        'error'
                    );
                    console.error('Error:', error);
                });
            }
        });
    }

    function returnItem(orderId, itemId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You want to process a return for this item?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, process return!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/admin/return-order-item/${orderId}/${itemId}`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    Swal.fire(
                        'Returned!',
                        data.message,
                        'success'
                    ).then(() => {
                        location.reload();
                    });
                })
                .catch(error => {
                    Swal.fire(
                        'Error!',
                        'Error processing return',
                        'error'
                    );
                    console.error('Error:', error);
                });
            }
        });
    }

    function handleReturn(orderId, itemId, action) {
        Swal.fire({
            title: 'Are you sure?',
            text: `You want to ${action} this return request?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: `Yes, ${action} it!`
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/admin/handle-return-request/${orderId}/${itemId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ action })
                })
                .then(response => response.json())
                .then(data => {
                    Swal.fire(
                        'Processed!',
                        data.message,
                        'success'
                    ).then(() => {
                        location.reload();
                    });
                })
                .catch(error => {
                    Swal.fire(
                        'Error!',
                        'Error handling return request',
                        'error'
                    );
                    console.error('Error:', error);
                });
            }
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('tbody tr').forEach(row => {
            const status = row.querySelector('.status-dropdown').value;
            row.classList.add(`status-${status.toLowerCase()}`);
        });
    });
</script>
