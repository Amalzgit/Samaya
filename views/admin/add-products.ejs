<main>

    <section class="content-main">
        <div class="content-header">
            <div>
                <h2 class="content-title card-title">Add New Product</h2>
                <p>Add your Products</p>
            </div>
        </div>
        <div class="card mb-4">
            <form id="addProductForm" action="/admin/add-product" method="post" enctype="multipart/form-data">
                <header class="card-header">
                    <div class="row align-items-center">
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="productCategory" class="form-label">Category</label>
                            <select id="productCategory" name="category" class="form-select">
                                <option value="" disabled selected>Select Category</option>
                                <% for (let category of categories) { %>
                                    <option value="<%= category._id %>">
                                        <%= category.name %>
                                    </option>
                                <% } %>
                            </select>
                            <div id="productCategoryError" class="invalid-feedback"></div>
                        </div>
                    </div>
                </header>

                <div class="card-body">
                    <% if (successMessage) { %>
                        <div class="alert alert-success">
                            <%= successMessage %>
                        </div>
                    <% } %>

                    <% if (errorMessage) { %>
                        <div class="alert alert-danger">
                            <%= errorMessage.msg %>
                        </div>
                    <% } %>

                    <article class="itemlist">
                        <div class="row align-items-center">
                            <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                                <label for="name" class="form-label">Product Name</label>
                                <input type="text" id="name" name="name" class="form-control" placeholder="Enter product name">
                                <span id="nameError" class="error" style="color: red;"></span>
                            </div>
                            <div class="col-lg-2 col-sm-2 col-4 col-price">
                                <label for="price" class="form-label">Price</label>
                                <input type="text" id="price" name="price" class="form-control" placeholder="Enter price">
                                <span id="priceError" class="error" style="color: red;"></span>
                            </div>
                            <div class="col-lg-2 col-sm-2 col-4 col-price">
                                <label for="stock" class="form-label">Stock</label>
                                <input type="number" id="stock" name="stock" class="form-control" placeholder="Enter stock quantity">
                                <span id="stockError" class="error" style="color: red;"></span>
                            </div>
                            <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                                <label for="description" class="form-label">Description</label>
                                <textarea id="description" name="description" class="form-control" rows="3" placeholder="Enter product description"></textarea>
                                <span id="descriptionError" class="error" style="color: red;"></span>
                            </div>
                            <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                                <label for="images" class="form-label">Product Images</label>
                                <input type="file" id="images" multiple name="images" class="form-control" accept="image/*">
                                <input type="hidden" id="selectedFiles" name="selectedFiles">
                                <span id="imagesError" class="error" style="color: red;"></span>
                                
                                <!-- Container for image preview -->
                                <div id="imagePreviewContainer" class="row mt-2">
                                    <!-- Image previews will be added here dynamically -->
                                </div>
                            </div>
                            
                        </div>
                    </article>

                    <!-- New fields -->
                    <div class="row mt-3">
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="brand" class="form-label">Brand</label>
                            <select id="brand" name="brand" class="form-control">
                                <% for (let brand of brands) { %>
                                    <option value="<%= brand.name %>" ><%= brand.name %></option>
                                  <% } %>
                               
                                
                            </select>
                        </div>
                        
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="caseMaterial" class="form-label">Case Material</label>
                            <input type="text" id="caseMaterial" name="caseMaterial" class="form-control" placeholder="Enter case material">
                        </div>
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="crystalType" class="form-label">Crystal Type</label>
                            <select id="crystalType" name="crystalType" class="form-select">
                                <option value="" disabled selected>Select Crystal Type</option>
                                <option value="Sapphire">Sapphire</option>
                                <option value="Mineral">Mineral</option>
                                <option value="Acrylic">Acrylic</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="dialColor" class="form-label">Dial Color</label>
                            <input type="text" id="dialColor" name="dialColor" class="form-control" placeholder="Enter dial color">
                        </div>
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="hourMarkers" class="form-label">Hour Markers</label>
                            <input type="text" id="hourMarkers" name="hourMarkers" class="form-control" placeholder="Enter hour markers">
                        </div>
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="handType" class="form-label">Hand Type</label>
                            <input type="text" id="handType" name="handType" class="form-control" placeholder="Enter hand type">
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="bezelType" class="form-label">Bezel Type</label>
                            <input type="text" id="bezelType" name="bezelType" class="form-control" placeholder="Enter bezel type">
                        </div>
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="caseShape" class="form-label">Case Shape</label>
                            <input type="text" id="caseShape" name="caseShape" class="form-control" placeholder="Enter case shape">
                        </div>
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="additionalDesignElements" class="form-label">Additional Design Elements</label>
                            <input type="text" id="additionalDesignElements" name="additionalDesignElements" class="form-control" placeholder="Enter additional design elements">
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="powerReserve" class="form-label">Power Reserve</label>
                            <input type="text" id="powerReserve" name="powerReserve" class="form-control" placeholder="Enter power reserve">
                        </div>
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="warrantyPeriod" class="form-label">Warranty Period</label>
                            <input type="text" id="warrantyPeriod" name="warrantyPeriod" class="form-control" placeholder="Enter warranty period">
                        </div>
                        <div class="col-lg-4 col-sm-4 col-8 flex-grow-1 col-name">
                            <label for="certifications" class="form-label">Certifications</label>
                            <input type="text" id="certifications" name="certifications" class="form-control" placeholder="Enter certifications">
                        </div>
                    </div>

                    <div class="row align-items-center mt-3">
                        <div class="col-lg-12 col-sm-12 col-12 text-end">
                            <button type="submit" class="btn btn-primary">Add Product</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </section>
</main>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const categoryInput = document.getElementById('productCategory');
        const nameInput = document.getElementById('name');
        const priceInput = document.getElementById('price');
        const descriptionInput = document.getElementById('description');
        const imagesInput = document.getElementById('images');
        const stockInput = document.getElementById('stock');
        const brandInput = document.getElementById('brand');
        const caseMaterialInput = document.getElementById('caseMaterial');
        const crystalTypeInput = document.getElementById('crystalType');
        const dialColorInput = document.getElementById('dialColor');
        const hourMarkersInput = document.getElementById('hourMarkers');
        const handTypeInput = document.getElementById('handType');
        const bezelTypeInput = document.getElementById('bezelType');
        const caseShapeInput = document.getElementById('caseShape');
        const additionalDesignElementsInput = document.getElementById('additionalDesignElements');
        const powerReserveInput = document.getElementById('powerReserve');
        const warrantyPeriodInput = document.getElementById('warrantyPeriod');
        const certificationsInput = document.getElementById('certifications');

        const categoryError = document.getElementById('productCategoryError');
        const nameError = document.getElementById('nameError');
        const priceError = document.getElementById('priceError');
        const descriptionError = document.getElementById('descriptionError');
        const imagesError = document.getElementById('imagesError');
        const stockError = document.getElementById('stockError');

        const validateCategory = () => {
            if (categoryInput.value.trim() === '') {
                categoryError.textContent = '* Category is required';
                return false;
            } else {
                categoryError.textContent = '';
                return true;
            }
        };

        const validateName = () => {
            if (nameInput.value.trim() === '') {
                nameError.textContent = '* Product name is required';
                return false;
            } else {
                nameError.textContent = '';
                return true;
            }
        };

        const validatePrice = () => {
            const priceRegex = /^[0-9]+(\.[0-9]{1,2})?$/;
            const priceValue = priceInput.value.trim();

            if (priceValue === '') {
                priceError.textContent = '* Price is required';
                return false;
            } else if (!priceRegex.test(priceValue)) {
                priceError.textContent = '* Enter a valid price';
                return false;
            } else if (parseFloat(priceValue) < 0) {
                priceError.textContent = '* Price cannot be negative';
                return false;
            } else {
                priceError.textContent = '';
                return true;
            }
        };

        const validateStock = () => {
            const stockValue = stockInput.value.trim();
            if (stockValue === '') {
                stockError.textContent = '* Stock is required';
                return false;
            } else if (isNaN(stockValue) || parseInt(stockValue) < 0) {
                stockError.textContent = '* Enter a valid stock quantity';
                return false;
            } else {
                stockError.textContent = '';
                return true;
            }
        };

        const validateDescription = () => {
            if (descriptionInput.value.trim() === '') {
                descriptionError.textContent = '* Description is required';
                return false;
            } else {
                descriptionError.textContent = '';
                return true;
            }
        };

        const validateImages = () => {
            const allowedExtensions = /(\.jpg|\.jpeg|\.png|\.gif)$/i;

            if (imagesInput.files.length === 0) {
                imagesError.textContent = '* Images are required';
                return false;
            }

            for (let i = 0; i < imagesInput.files.length; i++) {
                const file = imagesInput.files[i];

                if (!allowedExtensions.exec(file.name)) {
                    imagesError.textContent = '* Invalid file type. Only JPG, JPEG, PNG, and GIF are allowed';
                    return false;
                }

                const maxSize = 5 * 1024 * 1024;
                if (file.size > maxSize) {
                    imagesError.textContent = `* File size should be less than 5MB. ${file.name} is too large`;
                    return false;
                }
            }

            imagesError.textContent = '';
            return true;
        };

        categoryInput.addEventListener('input', validateCategory);
        nameInput.addEventListener('input', validateName);
        priceInput.addEventListener('input', validatePrice);
        descriptionInput.addEventListener('input', validateDescription);
        imagesInput.addEventListener('input', validateImages);
        stockInput.addEventListener('input', validateStock);

        const form = document.getElementById('addProductForm');

        form.addEventListener('submit', (event) => {
            const isCategoryValid = validateCategory();
            const isNameValid = validateName();
            const isPriceValid = validatePrice();
            const isStockValid = validateStock();
            const isDescriptionValid = validateDescription();
            const areImagesValid = validateImages();

            if (!isCategoryValid || !isNameValid || !isPriceValid || !isStockValid || !isDescriptionValid || !areImagesValid) {
                event.preventDefault();
            }
        });
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const fileInput = document.getElementById('images');
        const previewContainer = document.getElementById('imagePreviewContainer');
        let images = [];

        fileInput.addEventListener('change', function(event) {
            previewContainer.innerHTML = '';
            images = [];

            const files = event.target.files;
            
            if (files.length === 0) {
                previewContainer.innerHTML = '<p>No images selected.</p>';
                return;
            }

            Array.from(files).forEach(file => {
                if (file && file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        images.push(e.target.result);

                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.classList.add('img-thumbnail');
                        img.style.maxWidth = '100%';
                        img.style.height = 'auto';

                        const colDiv = document.createElement('div');
                        colDiv.classList.add('col');
                        colDiv.appendChild(img);
                        previewContainer.appendChild(colDiv);
                    };
                    
                    reader.readAsDataURL(file);
                }
            });
        });
    });
</script>
<script>


document.addEventListener('DOMContentLoaded', function() {
    const fileInput = document.getElementById('images');
    const previewContainer = document.getElementById('imagePreviewContainer');
    const selectedFilesInput = document.getElementById('selectedFiles');
    let selectedFiles = new DataTransfer();

    fileInput.addEventListener('change', handleFileSelect);

    function handleFileSelect(event) {
        const files = event.target.files;
        
        for (let file of files) {
            if (file.type.startsWith('image/')) {
                addFileToSelection(file);
            }
        }
        
        updateFileInput();
        renderPreviews();
    }

    function addFileToSelection(file) {
        // Check if file already exists
        for (let i = 0; i < selectedFiles.files.length; i++) {
            if (selectedFiles.files[i].name === file.name) {
                return; // File already exists, skip it
            }
        }
        selectedFiles.items.add(file);
    }

    function removeFile(fileName) {
        for (let i = 0; i < selectedFiles.files.length; i++) {
            if (selectedFiles.files[i].name === fileName) {
                selectedFiles.items.remove(i);
                break;
            }
        }
        updateFileInput();
        renderPreviews();
    }

    function updateFileInput() {
        fileInput.files = selectedFiles.files;
        selectedFilesInput.value = JSON.stringify(Array.from(selectedFiles.files).map(f => f.name));
    }

    function renderPreviews() {
        previewContainer.innerHTML = '';
        for (let file of selectedFiles.files) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const preview = createPreviewElement(e.target.result, file.name);
                previewContainer.appendChild(preview);
            };
            reader.readAsDataURL(file);
        }
    }

    function createPreviewElement(src, fileName) {
        const colDiv = document.createElement('div');
        colDiv.className = 'col-md-3 mb-3';
        
        const imgContainer = document.createElement('div');
        imgContainer.className = 'position-relative';
        
        const img = document.createElement('img');
        img.src = src;
        img.className = 'img-thumbnail';
        img.style.width = '100%';
        img.style.height = 'auto';
        
        const removeBtn = document.createElement('button');
        removeBtn.textContent = 'X';
        removeBtn.className = 'btn btn-danger btn-sm position-absolute top-0 end-0';
        removeBtn.onclick = () => removeFile(fileName);
        
        imgContainer.appendChild(img);
        imgContainer.appendChild(removeBtn);
        colDiv.appendChild(imgContainer);
        
        return colDiv;
    }
});

</script>